<?namespace Intervolga\Common\Tools;

use Bitrix\Main\Application;
use Bitrix\Main\IO\File;

class Htaccess extends File
{
	const COMMENT_PAD = 80;

	public function __construct()
	{
		$root = Application::getDocumentRoot();
		parent::__construct($root . '/.htaccess');
	}

	public function denyLogs()
	{
		if ($this->isExists() && !$this->hasDenyLogs())
		{
			$this->addRewriteRule($this->getDenyLogs());
		}
	}

	/**
	 * @param string $rule
	 *
	 * @return bool
	 */
	protected function addRewriteRule($rule)
	{
		if ($this->isExists() && !$this->hasDenyLogs())
		{
			$this->appendAfter($rule, 'RewriteEngine On');
		}
	}

	/**
	 * @param string $append
	 * @param string $find
	 */
	protected function appendAfter($append, $find)
	{
		$content = $this->getContents();
		$indent = $this->getIndent($find);
		$pattern = '/^[\s]*' . preg_quote($find) . '/m';
		$content = preg_replace(
			$pattern,
			$indent . $find . PHP_EOL . $this->getCommentedString($indent, $append),
			$content
		);
		$this->putContents($content);
	}

	/**
	 * @param string $find
	 *
	 * @return string
	 * @throws \Bitrix\Main\IO\FileNotFoundException
	 */
	protected function getIndent($find)
	{
		$result = '';
		$pattern = '/^([\s]*)' . preg_quote($find) . '/m';
		$matches = array();
		$pregMatch = preg_match($pattern, $this->getContents(), $matches);
		if ($pregMatch)
		{
			$result = $matches[1];
		}

		return $result;
	}

	/**
	 * @return bool
	 */
	protected function hasDenyLogs()
	{
		$result = false;
		if ($this->isExists())
		{
			$pattern = '/^[\s]*' . preg_quote($this->getDenyLogs()) . '/m';
			$res = preg_match($pattern, $this->getContents());
			$result = !!$res;
		}

		return $result;
	}

	/**
	 * @param string $indent
	 * @param string $string
	 *
	 * @return string
	 */
	protected function getCommentedString($indent, $string)
	{
		if (strlen($indent . $string) > static::COMMENT_PAD)
		{
			return $indent . $this->getComment() . PHP_EOL . $indent . $string . PHP_EOL;
		}
		else
		{
			return str_pad($indent . $string, static::COMMENT_PAD, ' ', STR_PAD_RIGHT) . $this->getComment();
		}
	}

	/**
	 * @return string
	 */
	protected function getDenyLogs()
	{
		return 'RewriteRule \S+.log$ - [F]';
	}

	/**
	 * @return string
	 */
	protected function getComment()
	{
		return '# generated by intervolga.common';
	}
}